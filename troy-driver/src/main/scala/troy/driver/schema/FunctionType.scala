package troy.driver.schema

import troy.driver.{ CassandraDataType => CDT }
import shapeless._
import troy.driver.query.select.Select.NoKeyspace // FIXME: We should not refer to query types here

/*
 * Represents Cql function type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
trait FunctionType[Version, Keyspace, Name, Params <: HList] {
  type Out <: CDT
}

object FunctionType {
  type Aux[Version, Keyspace, Name, Ps <: HList, O] = FunctionType[Version, Keyspace, Name, Ps] { type Out = O }

  def instance[Version, Keyspace, Name, Ps <: HList, O <: CDT]: Aux[Version, Keyspace, Name, Ps, O] =
    new FunctionType[Version, Keyspace, Name, Ps] { type Out = O }

  def builtin0[V, N, O <: CDT] = instance[V, NoKeyspace, N, HNil, O]
  def builtin1[V, N, P1 <: CDT, O <: CDT] = instance[V, NoKeyspace, N, P1 :: HNil, O]

  implicit def nowFunctionType[V] = builtin0[V, "now", CDT.TimeUuid]
  implicit def writetimeFunctionType[V, P1 <: CDT] = builtin1[V, "writetime", P1, CDT.BigInt]
  implicit def dateOfFunctionType[V] = builtin1[V, "dateof", CDT.TimeUuid, CDT.Timestamp]
  // TODO
}
