/*
 * Copyright 2016 Tamer AbdulRadi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package troy
package driver.schema.column

import troy.driver.CassandraDataType
import troy.driver.schema.TableExists

import scala.reflect.macros.blackbox.Context

/*
 * Represents the column's Cassandra data type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
trait ColumnType[Version, Keyspace, Table, Column] {
  type Out <: CassandraDataType
}

object ColumnType {
  type Aux[V, K, T, C, CT] = ColumnType[V, K, T, C] { type Out = CT }

  def instance[V, K, T, C, CT <: CassandraDataType](implicit tableExists: TableExists[V, K, T]): Aux[V, K, T, C, CT] =
    new ColumnType[V, K, T, C] { type Out = CT }
}
