/*
 * Copyright 2016 Tamer AbdulRadi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package troy
package driver.schema

import troy.tast.{ Identifier, MaybeKeyspaceName, TableName }

import scala.annotation.implicitNotFound

/*
 * Name is expected to be a textual literal type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
@implicitNotFound("Table ${T} doesn't exists in version ${Version}")
trait TableExists[Version, T <: TableName[_, _]]

object TableExists {
  def instance[V, K <: MaybeKeyspaceName, Name <: Identifier](implicit keyspaceExists: KeyspaceExists[V, K]) = new TableExists[V, TableName[K, Name]] {}
}